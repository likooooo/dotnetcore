using System;
using System.Text;
using System.Linq;
using System.Runtime;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Serialization;

using RuntimeDebug;

namespace ImageProcess
{
    using ImageProcess.ImageExtention;

    public class Image_8BitRgb:ImageCore,IImageCore
    {

        public Image_8BitRgb(){}
        public Image_8BitRgb(int width,int height,byte initColor = 0):base()
        {          
            InitImageData(width,height,8);
            #region caculate head
            //1
            ImageType type = new ImageType
            {
                bfType = FileType
            };
            //2
            ImageFile bf = new ImageFile
            {
                bfSize = FileBytesSize,
                bfReserved = 0,
                bfOffBits = HeadStructSize
            };
            //3
            ImageFileInfo bfi = new ImageFileInfo
            {
                biSize = 40,
                biWidth = width,
                biHeight = height,
                biPlanes = 1,
                biBitCount = BitCount,
                biCompression = 0,
                biSizeImage = 0,
                biXPelsPerMeter = 0,
                biYPelsPerMeter = 0,
                biClrUsed = 0,
                biClrImportant = 0
            };
            //4 调色盘实现
            ColorPalette cp = new ColorPalette
            {
                palette = InitPalette()            

            };
            //5
            ImageData data = new ImageData
            {
                D =  new byte[BitmapSize]
            };
            #endregion
           
            Span<byte> fileData;
            #region heap->stack
            ImageMemoryOpereSet.StructToSpan(type,bf,bfi,cp,data,out fileData);        
            if(initColor>0)
            {
                (fileData.Slice((int)HeadStructSize,BitmapSize)).Fill(initColor);
            }
            #endregion
            
            InitUnmanagedMen(fileData.ToArray());
        }

        private  byte[] InitPalette()
        {
            return new byte[]
            {
                #region  8bit rgb
                0,0,0,0,  
                0,0,128,0,
                0,128,0,0,
                0,128,128,0,
                128,0,0,0,
                128,0,128,0,
                128,128,0,0,
                192,192,192,0,
                192,220,192,0,
                240,202,166,0,
                0,32,64,0,
                0,32,96,0,
                0,32,128,0,
                0,32,160,0,
                0,32,192,0,
                0,32,224,0,
                0,64,0,0,
                0,64,32,0,
                0,64,64,0,
                0,64,96,0,
                0,64,128,0,
                0,64,160,0,
                0,64,192,0,
                0,64,224,0,
                0,96,0,0,
                0,96,32,0,
                0,96,64,0,
                0,96,96,0,
                0,96,128,0,
                0,96,160,0,
                0,96,192,0,
                0,96,224,0,
                0,128,0,0,
                0,128,32,0,
                0,128,64,0,
                0,128,96,0,
                0,128,128,0,
                0,128,160,0,
                0,128,192,0,
                0,128,224,0,
                0,160,0,0,
                0,160,32,0,
                0,160,64,0,
                0,160,96,0,
                0,160,128,0,
                0,160,160,0,
                0,160,192,0,
                0,160,224,0,
                0,192,0,0,
                0,192,32,0,
                0,192,64,0,
                0,192,96,0,
                0,192,128,0,
                0,192,160,0,
                0,192,192,0,
                0,192,224,0,
                0,224,0,0,
                0,224,32,0,
                0,224,64,0,
                0,224,96,0,
                0,224,128,0,
                0,224,160,0,
                0,224,192,0,
                0,224,224,0,
                64,0,0,0,
                64,0,32,0,
                64,0,64,0,
                64,0,96,0,
                64,0,128,0,
                64,0,160,0,
                64,0,192,0,
                64,0,224,0,
                64,32,0,0,
                64,32,32,0,
                64,32,64,0,
                64,32,96,0,
                64,32,128,0,
                64,32,160,0,
                64,32,192,0,
                64,32,224,0,
                64,64,0,0,
                64,64,32,0,
                64,64,64,0,
                64,64,96,0,
                64,64,128,0,
                64,64,160,0,
                64,64,192,0,
                64,64,224,0,
                64,96,0,0,
                64,96,32,0,
                64,96,64,0,
                64,96,96,0,
                64,96,128,0,
                64,96,160,0,
                64,96,192,0,
                64,96,224,0,
                64,128,0,0,
                64,128,32,0,
                64,128,64,0,
                64,128,96,0,
                64,128,128,0,
                64,128,160,0,
                64,128,192,0,
                64,128,224,0,
                64,160,0,0,
                64,160,32,0,
                64,160,64,0,
                64,160,96,0,
                64,160,128,0,
                64,160,160,0,
                64,160,192,0,
                64,160,224,0,
                64,192,0,0,
                64,192,32,0,
                64,192,64,0,
                64,192,96,0,
                64,192,128,0,
                64,192,160,0,
                64,192,192,0,
                64,192,224,0,
                64,224,0,0,
                64,224,32,0,
                64,224,64,0,
                64,224,96,0,
                64,224,128,0,
                64,224,160,0,
                64,224,192,0,
                64,224,224,0,
                128,0,0,0,
                128,0,32,0,
                128,0,64,0,
                128,0,96,0,
                128,0,128,0,
                128,0,160,0,
                128,0,192,0,
                128,0,224,0,
                128,32,0,0,
                128,32,32,0,
                128,32,64,0,
                128,32,96,0,
                128,32,128,0,
                128,32,160,0,
                128,32,192,0,
                128,32,224,0,
                128,64,0,0,
                128,64,32,0,
                128,64,64,0,
                128,64,96,0,
                128,64,128,0,
                128,64,160,0,
                128,64,192,0,
                128,64,224,0,
                128,96,0,0,
                128,96,32,0,
                128,96,64,0,
                128,96,96,0,
                128,96,128,0,
                128,96,160,0,
                128,96,192,0,
                128,96,224,0,
                128,128,0,0,
                128,128,32,0,
                128,128,64,0,
                128,128,96,0,
                128,128,128,0,
                128,128,160,0,
                128,128,192,0,
                128,128,224,0,
                128,160,0,0,
                128,160,32,0,
                128,160,64,0,
                128,160,96,0,
                128,160,128,0,
                128,160,160,0,
                128,160,192,0,
                128,160,224,0,
                128,192,0,0,
                128,192,32,0,
                128,192,64,0,
                128,192,96,0,
                128,192,128,0,
                128,192,160,0,
                128,192,192,0,
                128,192,224,0,
                128,224,0,0,
                128,224,32,0,
                128,224,64,0,
                128,224,96,0,
                128,224,128,0,
                128,224,160,0,
                128,224,192,0,
                128,224,224,0,
                192,0,0,0,
                192,0,32,0,
                192,0,64,0,
                192,0,96,0,
                192,0,128,0,
                192,0,160,0,
                192,0,192,0,
                192,0,224,0,
                192,32,0,0,
                192,32,32,0,
                192,32,64,0,
                192,32,96,0,
                192,32,128,0,
                192,32,160,0,
                192,32,192,0,
                192,32,224,0,
                192,64,0,0,
                192,64,32,0,
                192,64,64,0,
                192,64,96,0,
                192,64,128,0,
                192,64,160,0,
                192,64,192,0,
                192,64,224,0,
                192,96,0,0,
                192,96,32,0,
                192,96,64,0,
                192,96,96,0,
                192,96,128,0,
                192,96,160,0,
                192,96,192,0,
                192,96,224,0,
                192,128,0,0,
                192,128,32,0,
                192,128,64,0,
                192,128,96,0,
                192,128,128,0,
                192,128,160,0,
                192,128,192,0,
                192,128,224,0,
                192,160,0,0,
                192,160,32,0,
                192,160,64,0,
                192,160,96,0,
                192,160,128,0,
                192,160,160,0,
                192,160,192,0,
                192,160,224,0,
                192,192,0,0,
                192,192,32,0,
                192,192,64,0,
                192,192,96,0,
                192,192,128,0,
                192,192,160,0,
                240,251,255,0,
                164,160,160,0,
                128,128,128,0,
                0,0,255,0,
                0,255,0,0,
                0,255,255,0,
                255,0,0,0,
                255,0,255,0,
                255,255,0,0,
                255,255,255,0
                #endregion
            };
        }
    
        public override void Decompose3(out IImageCore r,out IImageCore g,out IImageCore b)
        {
            this.Decompose3_RGB_1_4_8(out r,out g,out b);
        }

        public override void Rgb1ToGray(out IImageCore gray)
        {
            IImageCore r,g,b;
            this.Decompose3_RGB_1_4_8(out r,out g,out b);
            this.Rgb3ToGray_8(r,g,b,out gray);
        }
    }
}